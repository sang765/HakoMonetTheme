// ==UserScript==
// @name         Hako: Monet Theme (Local)
// @namespace    https://github.com/sang765
// @version      3.3.0
// @description  Material You theme for Hako/DocLN (Local Development Version).
// @description:vi Material You theme d√†nh cho Hako/DocLN (Phi√™n b·∫£n ph√°t tri·ªÉn c·ª•c b·ªô).
// @icon         https://github.com/sang765/HakoMonetTheme/raw/main/.github/assets/logo.png
// @author       SangsDayy
// @match        https://docln.sbs/*
// @match        https://docln.net/*
// @match        https://ln.hako.vn/*
// @grant        GM_addStyle
// @grant        GM_getResourceText
// @grant        GM_xmlhttpRequest
// @grant        GM_info
// @grant        GM_registerMenuCommand
// @grant        GM_notification
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// @grant        GM_listValues
// @grant        GM_openInTab
// @run-at       document-end
// @require      https://greasyfork.org/scripts/447115-gm-config/code/GM_config.js?version=1060849
// @require      file://./main.js
// @require      file://./api/monet.js
// @require      file://./module/simple-cors.js
// @require      file://./class/info-truyen.js
// @require      file://./class/animation.js
// @require      file://./class/tag-color.js
// @require      file://./colors/page-info-truyen.js
// @require      file://./colors/page-general.js
// @require      file://./colors/page-general-light.js
// @require      file://./colors/page-info-truyen-light.js
// @require      file://./module/theme-detector.js
// @require      file://./module/config.js
// @require      file://./module/ad-blocker.js
// @require      file://./module/auto-reload.js
// @supportURL   https://github.com/sang765/HakoMonetTheme/issues
// @homepageURL  https://github.com/sang765/HakoMonetTheme
// @license      MIT
// ==/UserScript==

(function() {
    'use strict';

    // NOTE: This is a local test version for development only.
    // Do not use in production. For the official version, visit: https://github.com/sang765/HakoMonetTheme
    
    const DEBUG = true;
    const SCRIPT_NAME = 'Hako: Monet Theme (Local)';
    const GITHUB_REPO = 'https://github.com/sang765/HakoMonetTheme';
    const RAW_GITHUB_URL = 'https://raw.githubusercontent.com/sang765/HakoMonetTheme/main/';
    
    function debugLog(...args) {
        if (DEBUG) {
            console.log(`[${SCRIPT_NAME}]`, ...args);
        }
    }
    
    function showNotification(title, message, timeout = 5000) {
        if (typeof GM_notification === 'function') {
            GM_notification({
                title: title,
                text: message,
                timeout: timeout,
                silent: false
            });
        } else {
            // Fallback notification
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 15px 20px;
                border-radius: 10px;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
                z-index: 10000;
                max-width: 300px;
                animation: slideIn 0.5s ease-out;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            notification.innerHTML = `
                <h4 style="margin: 0 0 8px 0; font-size: 16px; font-weight: 600;">${title}</h4>
                <p style="margin: 0; font-size: 14px; opacity: 0.9;">${message}</p>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, timeout);
        }
    }
    
    function registerMenuCommands() {
        // Command ƒë·ªÉ ki·ªÉm tra c·∫≠p nh·∫≠t
        if (typeof GM_registerMenuCommand === 'function') {
            GM_registerMenuCommand('üé® C√†i ƒë·∫∑t', openColorConfig, 'c');
            GM_registerMenuCommand('üö´ Ad Blocker', openAdBlockerConfig, 'a');
            GM_registerMenuCommand('üìä Th√¥ng tin script', showScriptInfo, 'i');
            GM_registerMenuCommand('üêõ B√°o c√°o l·ªói', reportBug, 'b');
            GM_registerMenuCommand('üí° ƒê·ªÅ xu·∫•t t√≠nh nƒÉng', suggestFeature, 'f');
            GM_registerMenuCommand('üîß Debug Mode', toggleDebugMode, 'd');

            debugLog('ƒê√£ ƒëƒÉng k√Ω menu commands');
        }
    }
    
    function openSettings() {
        // M·ªü trang c√†i ƒë·∫∑t ho·∫∑c t·∫°o dialog settings
        showNotification('C√†i ƒë·∫∑t', 'T√≠nh nƒÉng c√†i ƒë·∫∑t ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.', 3000);
        debugLog('M·ªü c√†i ƒë·∫∑t');

        // C√≥ th·ªÉ t√≠ch h·ª£p v·ªõi GM_config sau n√†y
        try {
            if (typeof GM_config !== 'undefined') {
                GM_config.open();
            }
        } catch (e) {
            debugLog('GM_config kh√¥ng kh·∫£ d·ª•ng:', e);
        }
    }

    function openColorConfig() {
        // ƒê·∫£m b·∫£o config module ƒë√£ ƒë∆∞·ª£c t·∫£i
        if (typeof window.HMTConfig !== 'undefined' && typeof window.HMTConfig.openConfigDialog === 'function') {
            window.HMTConfig.openConfigDialog();
            showNotification('C√†i ƒë·∫∑t m√†u s·∫Øc', 'M·ªü b·∫£ng c√†i ƒë·∫∑t m√†u s·∫Øc...', 3000);
        } else {
            showNotification('L·ªói', 'Module c√†i ƒë·∫∑t m√†u s·∫Øc ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng l√†m m·ªõi trang.', 5000);
            debugLog('Config module ch∆∞a ƒë∆∞·ª£c t·∫£i');
        }
    }

    function openAdBlockerConfig() {
        // ƒê·∫£m b·∫£o ad blocker module ƒë√£ ƒë∆∞·ª£c t·∫£i
        if (typeof window.HMTAdBlocker !== 'undefined' && typeof window.HMTAdBlocker.openDialog === 'function') {
            window.HMTAdBlocker.openDialog();
            showNotification('Ad Blocker', 'M·ªü b·∫£ng c√†i ƒë·∫∑t Ad Blocker...', 3000);
        } else {
            showNotification('L·ªói', 'Module Ad Blocker ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng l√†m m·ªõi trang.', 5000);
            debugLog('Ad Blocker module ch∆∞a ƒë∆∞·ª£c t·∫£i');
        }
    }
    
    function showScriptInfo() {
        const info = `
T√™n: ${GM_info.script.name}
Phi√™n b·∫£n: ${GM_info.script.version}
T√°c gi·∫£: ${GM_info.script.author}
M√¥ t·∫£: ${GM_info.script.description}

Handler: ${GM_info.scriptHandler || 'Unknown'}
Engine: ${GM_info.scriptEngine || 'Unknown'}

GitHub: ${GITHUB_REPO}
B√°o c√°o l·ªói: ${GITHUB_REPO}/issues
        `.trim();
        
        alert(info);
        debugLog('Hi·ªÉn th·ªã th√¥ng tin script');
    }
    
    function reportBug() {
        GM_openInTab(GITHUB_REPO + '/issues/new?template=bug_report.md');
        showNotification('B√°o c√°o l·ªói', 'M·ªü trang b√°o c√°o l·ªói tr√™n GitHub...', 3000);
    }
    
    function suggestFeature() {
        GM_openInTab(GITHUB_REPO + '/issues/new?template=feature_request.md');
        showNotification('ƒê·ªÅ xu·∫•t t√≠nh nƒÉng', 'M·ªü trang ƒë·ªÅ xu·∫•t t√≠nh nƒÉng tr√™n GitHub...', 3000);
    }
    
    function toggleDebugMode() {
        const currentDebug = GM_getValue('debug_mode', false);
        const newDebug = !currentDebug;
        
        GM_setValue('debug_mode', newDebug);
        
        showNotification(
            'Ch·∫ø ƒë·ªô Debug', 
            newDebug ? 'ƒê√£ b·∫≠t ch·∫ø ƒë·ªô debug' : 'ƒê√£ t·∫Øt ch·∫ø ƒë·ªô debug',
            3000
        );
        
        debugLog(`Ch·∫ø ƒë·ªô debug ${newDebug ? 'b·∫≠t' : 't·∫Øt'}`);
        
        // Reload ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi
        if (confirm('C·∫ßn t·∫£i l·∫°i trang ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi. B·∫°n c√≥ mu·ªën t·∫£i l·∫°i ngay b√¢y gi·ªù kh√¥ng?')) {
            window.location.reload();
        }
    }
    
    function initializeScript() {
        debugLog(`B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o ${SCRIPT_NAME} v${GM_info.script.version}`);
        
        // ƒêƒÉng k√Ω menu commands
        registerMenuCommands();
        
        // Modules are loaded via @require, no need to load manually
        
        // Only show initialization notification if user has enabled it or if there are errors
        const showInitNotification = GM_getValue('show_init_notification', false);
        if (showInitNotification) {
            showNotification(
                `${SCRIPT_NAME}`,
                `ƒê√£ kh·ªüi t·∫°o th√†nh c√¥ng!`,
                3000
            );
        }
        
        debugLog('Kh·ªüi t·∫°o script ho√†n t·∫•t');
    }
    
    // Kh·ªüi ch·∫°y script
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeScript);
    } else {
        initializeScript();
    }
    
})();